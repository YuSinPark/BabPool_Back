<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ca.babpool.mapper.RestaurantMapper">
    <insert id="createRestaurant" parameterType="Restaurant">
        <selectKey keyProperty="restaurantId" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID() AS restaurantId
        </selectKey>
        INSERT INTO restaurant (
            MEMBER_ID,
            RESTAURANT_CATEGORY,
            RESTAURANT_NAME,
            RESTAURANT_ADDRESS,
            RESTAURANT_PHONE,
            RESTAURANT_MIN_PRICE,
            RESTAURANT_PHOTO,
            RESTAURANT_CLOSE_DAY,
            RESTAURANT_LICENSE_NUMBER,
            RESTAURANT_LATITUDE,
            RESTAURANT_LONGITUDE,
            RESTAURANT_STATUS,
            RESTAURANT_DETAIL_ADDRESS,
            RESTAURANT_RATING,
                                RESTAURANT_REPLY
        ) VALUES (
                     #{memberId},
                     #{restaurantCategory},
                     #{restaurantName},
                     #{restaurantAddress},
                     #{restaurantPhone},
                     #{restaurantMinPrice},
                     #{restaurantPhoto},
                     #{restaurantCloseDay},
                     #{restaurantLicenseNumber},
                     #{restaurantLatitude},
                     #{restaurantLongitude},
                     "N",
                     #{restaurantDetailAddress},
                     0,
                     0
                 )
    </insert>


    <select id="selectRestaurantDetail" parameterType="Long" resultType="Restaurant">
        SELECT
            *
        FROM
            restaurant
        WHERE
            restaurant_Id = #{restaurantId};
    </select>

    <update id="updateRestaurant" parameterType="Restaurant">
        UPDATE restaurant

            <trim prefix="SET" suffixOverrides=",">
                <if test="restaurantCategory != null">restaurant_Category = #{restaurantCategory},</if>
                <if test="restaurantName != null">restaurant_Name = #{restaurantName},</if>
                <if test="restaurantContent != null">restaurant_Content = #{restaurantContent},</if>
                <if test="restaurantAddress != null">restaurant_Address = #{restaurantAddress},</if>
                <if test="restaurantPhone != null">restaurant_Phone = #{restaurantPhone},</if>
                <if test="restaurantMinPrice != null">restaurant_Min_Price = #{restaurantMinPrice},</if>
                <if test="restaurantPhoto != null">restaurant_Photo = #{restaurantPhoto},</if>
                <if test="restaurantCloseDay != null">restaurant_Close_Day = #{restaurantCloseDay},</if>
                <if test="restaurantOrigin != null">restaurant_Origin = #{restaurantOrigin},</if>
                <if test="restaurantStatus != null">restaurant_Status = #{restaurantStatus}</if>
            </trim>
        WHERE
            restaurant_Id = #{restaurantId}
    </update>

    <delete id="deleteRestaurant">
        DELETE
        FROM restaurant
        WHERE restaurant_Id = #{restaurantId};

    </delete>

    <select id="getAllRestaurant" parameterType="string" resultType="RestaurantDto">
        SELECT *
        FROM restaurant
        WHERE member_Id = #{memberId};
    </select>
    <select id="selectRestaurantInformationsDetail" resultType="RestaurantResponseDto">
        SELECT R.RESTAURANT_ID,
               R.MEMBER_ID,
               R.RESTAURANT_CATEGORY,
               R.RESTAURANT_NAME,
               R.RESTAURANT_CONTENT,
               R.RESTAURANT_ADDRESS,
               R.RESTAURANT_PHONE,
               R.RESTAURANT_RATING,
               R.RESTAURANT_REPLY,
               R.RESTAURANT_MIN_PRICE,
               R.RESTAURANT_PHOTO,
               R.RESTAURANT_LIKE_COUNT,
               R.RESTAURANT_CLOSE_DAY,
               R.RESTAURANT_ORIGIN,
               M.MEMBER_NICKNAME,
               RD.RD_TIME_MIN,
               RD.RD_TIME_MAX,
               RD.RD_TIME_AVG,
               RD.RD_PICKUP_TIME_MIN,
               RD.RD_PICKUP_TIME_MAX,
               RD.RD_PICKUP_TIME_AVG,
               RD.RD_TIP,
               lk.LIKES_ID,
               (SELECT COUNT(*) FROM review re WHERE re.RESTAURANT_ID = R.RESTAURANT_ID) AS reviewCount,
               (SELECT COUNT(*) FROM orderdetails od WHERE od.RESTAURANT_ID = R.RESTAURANT_ID) AS orderCount
        FROM restaurant R
                 LEFT JOIN member M ON R.MEMBER_ID = M.MEMBER_ID
                 LEFT JOIN restaurantdelivery RD ON R.RESTAURANT_ID = RD.RESTAURANT_ID
                 LEFT JOIN likes lk ON lk.RESTAURANT_ID = R.RESTAURANT_ID AND lk.MEMBER_ID = #{memberId}
        WHERE R.RESTAURANT_ID = #{restaurantId}
        GROUP BY R.RESTAURANT_ID,
                 R.MEMBER_ID,
                 R.RESTAURANT_CATEGORY,
                 R.RESTAURANT_NAME,
                 R.RESTAURANT_CONTENT,
                 R.RESTAURANT_ADDRESS,
                 R.RESTAURANT_PHONE,
                 R.RESTAURANT_RATING,
                 R.RESTAURANT_REPLY,
                 R.RESTAURANT_MIN_PRICE,
                 R.RESTAURANT_PHOTO,
                 R.RESTAURANT_LIKE_COUNT,
                 R.RESTAURANT_CLOSE_DAY,
                 R.RESTAURANT_ORIGIN,
                 M.MEMBER_NICKNAME,
                 RD.RD_TIME_MIN,
                 RD.RD_TIME_MAX,
                 RD.RD_TIME_AVG,
                 RD.RD_PICKUP_TIME_MIN,
                 RD.RD_PICKUP_TIME_MAX,
                 RD.RD_PICKUP_TIME_AVG,
                 RD.RD_TIP,
                 lk.LIKES_ID;
    </select>

    <select id="selectRestaurantCategory" parameterType="String" resultType="RestaurantResponseDto">
        SELECT R.*,
        (SELECT COUNT(*) FROM review rv WHERE rv.RESTAURANT_ID = R.RESTAURANT_ID) AS review_count,
        RD.RD_ID, RD.RD_AREA, RD.RD_TIME_MIN, RD.RD_TIME_MAX, RD.RD_TIME_AVG
        FROM restaurant R
        LEFT JOIN restaurantdelivery RD ON R.RESTAURANT_ID = RD.RESTAURANT_ID
        WHERE R.restaurant_Category = #{restaurantCategory} AND R.RESTAURANT_STATUS = 'Y'
    </select>

    <select id="selectSearchResult" parameterType="String" resultType="RestaurantResponseDto">
        SELECT R.*,
        (SELECT COUNT(*) FROM review rv WHERE rv.RESTAURANT_ID = R.RESTAURANT_ID) AS review_count,
        MAX(RD.RD_ID) AS RD_ID, MAX(RD.RD_AREA) AS RD_AREA, MAX(RD.RD_TIME_MIN) AS RD_TIME_MIN, MAX(RD.RD_TIME_MAX) AS RD_TIME_MAX, MAX(RD.RD_TIME_AVG) AS RD_TIME_AVG
        FROM restaurant R
        LEFT JOIN restaurantdelivery RD ON R.RESTAURANT_ID = RD.RESTAURANT_ID
        LEFT JOIN menu M ON M.RESTAURANT_ID = R.RESTAURANT_ID
        WHERE R.RESTAURANT_CATEGORY LIKE CONCAT('%', #{searchValue}, '%')
        OR R.RESTAURANT_NAME LIKE CONCAT('%', #{searchValue}, '%')
        OR EXISTS (
        SELECT 1
        FROM menu M
        WHERE M.RESTAURANT_ID = R.RESTAURANT_ID
        AND M.MENU_NAME LIKE CONCAT('%', #{searchValue}, '%') AND R.RESTAURANT_STATUS = 'Y'
        )
        GROUP BY R.RESTAURANT_ID, R.RESTAURANT_NAME, R.RESTAURANT_CATEGORY, R.RESTAURANT_ADDRESS, R.RESTAURANT_RATING
    </select>

    <select id="selectRatingSortResult" parameterType="String" resultType="RestaurantResponseDto">
        SELECT R.*,
        (SELECT COUNT(*) FROM review rv WHERE rv.RESTAURANT_ID = R.RESTAURANT_ID) AS review_count,
        MAX(RD.RD_ID) AS RD_ID,
        MAX(RD.RD_AREA) AS RD_AREA,
        MAX(RD.RD_TIME_MIN) AS RD_TIME_MIN,
        MAX(RD.RD_TIME_MAX) AS RD_TIME_MAX,
        MAX(RD.RD_TIME_AVG) AS RD_TIME_AVG
        FROM restaurant R
        LEFT JOIN restaurantdelivery RD ON RD.RESTAURANT_ID = R.RESTAURANT_ID
        LEFT JOIN menu M ON M.RESTAURANT_ID = R.RESTAURANT_ID
        WHERE (R.RESTAURANT_NAME LIKE CONCAT('%', #{searchValue}, '%')
        OR R.RESTAURANT_CATEGORY LIKE CONCAT('%', #{searchValue}, '%')
        OR M.MENU_NAME LIKE CONCAT('%', #{searchValue}, '%'))
        AND R.RESTAURANT_STATUS = 'Y'
        GROUP BY R.RESTAURANT_ID, R.RESTAURANT_NAME, R.RESTAURANT_CATEGORY, R.RESTAURANT_ADDRESS, R.RESTAURANT_RATING
        ORDER BY CAST(R.RESTAURANT_RATING AS DECIMAL(3,1)) DESC;
    </select>

    <select id="selectMinPriceSortResult" parameterType="String" resultType="RestaurantResponseDto">
        SELECT R.*,
        (SELECT COUNT(*) FROM review rv WHERE rv.RESTAURANT_ID = R.RESTAURANT_ID) AS review_count,
        MAX(RD.RD_ID) AS RD_ID,
        MAX(RD.RD_AREA) AS RD_AREA,
        MAX(RD.RD_TIME_MIN) AS RD_TIME_MIN,
        MAX(RD.RD_TIME_MAX) AS RD_TIME_MAX,
        MAX(RD.RD_TIME_AVG) AS RD_TIME_AVG
        FROM restaurant R
        LEFT JOIN restaurantdelivery RD ON RD.RESTAURANT_ID = R.RESTAURANT_ID
        LEFT JOIN menu M ON M.RESTAURANT_ID = R.RESTAURANT_ID
        WHERE (R.RESTAURANT_NAME LIKE CONCAT('%', #{searchValue}, '%')
        OR R.RESTAURANT_CATEGORY LIKE CONCAT('%', #{searchValue}, '%')
        OR M.MENU_NAME LIKE CONCAT('%', #{searchValue}, '%'))
        AND R.RESTAURANT_STATUS = 'Y'
        GROUP BY R.RESTAURANT_ID, R.RESTAURANT_NAME, R.RESTAURANT_CATEGORY, R.RESTAURANT_ADDRESS, R.RESTAURANT_RATING, R.RESTAURANT_MIN_PRICE
        ORDER BY CAST(R.RESTAURANT_MIN_PRICE AS DECIMAL);
    </select>

    <select id="selectDeliveryTimeSortResult" parameterType="String" resultType="RestaurantResponseDto">
        SELECT R.*,
        (SELECT COUNT(*) FROM review RV WHERE RV.RESTAURANT_ID = R.RESTAURANT_ID) AS review_count,
        MAX(RD.RD_ID) AS RD_ID,
        MAX(RD.RD_AREA) AS RD_AREA,
        MAX(RD.RD_TIME_MIN) AS RD_TIME_MIN,
        MAX(RD.RD_TIME_MAX) AS RD_TIME_MAX,
        MAX(RD.RD_TIME_AVG) AS RD_TIME_AVG
        FROM restaurant R
        LEFT JOIN restaurantdelivery RD ON RD.RESTAURANT_ID = R.RESTAURANT_ID
        LEFT JOIN menu M ON M.RESTAURANT_ID = R.RESTAURANT_ID
        WHERE (R.RESTAURANT_NAME LIKE CONCAT('%', #{searchValue}, '%')
        OR R.RESTAURANT_CATEGORY LIKE CONCAT('%', #{searchValue}, '%')
        OR M.MENU_NAME LIKE CONCAT('%', #{searchValue}, '%'))
        AND R.RESTAURANT_STATUS = 'Y'
        GROUP BY R.RESTAURANT_ID, R.RESTAURANT_NAME, R.RESTAURANT_CATEGORY, R.RESTAURANT_ADDRESS, R.RESTAURANT_RATING, R.RESTAURANT_MIN_PRICE
        ORDER BY CAST(MAX(RD.RD_TIME_AVG) AS DECIMAL(3,1));
    </select>

    <select id="selectDistanceSortResult" parameterType="map" resultType="RestaurantResponseDto">
        SELECT R.*,
        (SELECT COUNT(*) FROM review RV WHERE RV.RESTAURANT_ID = R.RESTAURANT_ID) AS review_count,
        MAX(RD.RD_ID) AS RD_ID,
        MAX(RD.RD_AREA) AS RD_AREA,
        MAX(RD.RD_TIME_MIN) AS RD_TIME_MIN,
        MAX(RD.RD_TIME_MAX) AS RD_TIME_MAX,
        MAX(RD.RD_TIME_AVG) AS RD_TIME_AVG,
        6371 * 2 * ASIN(SQRT(
        POWER(SIN((CAST(#{memberLatitude} AS DECIMAL(10,7)) - ABS(R.RESTAURANT_LATITUDE)) * PI() / 180 / 2), 2) +
        COS(CAST(#{memberLatitude} AS DECIMAL(10,7)) * PI() / 180) * COS(ABS(R.RESTAURANT_LATITUDE) * PI() / 180) *
        POWER(SIN((CAST(#{memberLongitude} AS DECIMAL(10,7)) - ABS(R.RESTAURANT_LONGITUDE)) * PI() / 180 / 2), 2)
        )) AS distance_km
        FROM restaurant R
        LEFT JOIN restaurantdelivery RD ON RD.RESTAURANT_ID = R.RESTAURANT_ID
        LEFT JOIN menu M ON M.RESTAURANT_ID = R.RESTAURANT_ID
        LEFT JOIN review RV ON M.MENU_ID = RV.MENU_ID
        WHERE (R.RESTAURANT_NAME LIKE CONCAT('%', #{searchValue}, '%')
        OR R.RESTAURANT_CATEGORY LIKE CONCAT('%', #{searchValue}, '%')
        OR M.MENU_NAME LIKE CONCAT('%', #{searchValue}, '%'))
        AND R.RESTAURANT_STATUS = 'Y'
        GROUP BY R.RESTAURANT_ID, R.RESTAURANT_NAME, R.RESTAURANT_CATEGORY, R.RESTAURANT_ADDRESS, R.RESTAURANT_RATING, R.RESTAURANT_MIN_PRICE, distance_km
        ORDER BY distance_km ASC;
    </select>

    <select id="selectReplySortResult" parameterType="String" resultType="RestaurantResponseDto">
        SELECT R.*,
        COUNT(DISTINCT RV.REVIEW_ID) AS review_count,
        MAX(RD.RD_ID) AS RD_ID,
        MAX(RD.RD_AREA) AS RD_AREA,
        MAX(RD.RD_TIME_MIN) AS RD_TIME_MIN,
        MAX(RD.RD_TIME_MAX) AS RD_TIME_MAX,
        MAX(RD.RD_TIME_AVG) AS RD_TIME_AVG
        FROM restaurant R
        LEFT JOIN restaurantdelivery RD ON RD.RESTAURANT_ID = R.RESTAURANT_ID
        LEFT JOIN menu M ON M.RESTAURANT_ID = R.RESTAURANT_ID
        LEFT JOIN review RV ON RV.RESTAURANT_ID = R.RESTAURANT_ID
        WHERE (R.RESTAURANT_NAME LIKE CONCAT('%', #{searchValue}, '%')
        OR R.RESTAURANT_CATEGORY LIKE CONCAT('%', #{searchValue}, '%'))
        AND R.RESTAURANT_STATUS = 'Y'
        GROUP BY R.RESTAURANT_ID, R.RESTAURANT_NAME, R.RESTAURANT_CATEGORY, R.RESTAURANT_ADDRESS, R.RESTAURANT_RATING, R.RESTAURANT_MIN_PRICE
        ORDER BY review_count DESC;
    </select>

    <update id="updateRestaurantStatusByIdList" parameterType="RestaurantStatusRequestDto">
        UPDATE restaurant
        SET restaurant_Status = #{restaurantStatus}
        WHERE restaurant_Id IN
        <foreach collection="restaurantIdList" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="findMemberIdAndRestaurantNameByRestaurantId" parameterType="Long" resultType="RestaurantFcmDto">
        SELECT MEMBER_ID, RESTAURANT_NAME
        FROM restaurant
        where RESTAURANT_ID = #{restaurantId}
    </select>

    <update id="updateRestaurantReply" parameterType="ReviewDto">
        UPDATE restaurant
        SET RESTAURANT_REPLY = RESTAURANT_REPLY + 1
        WHERE RESTAURANT_ID = #{restaurantId};
    </update>

    <update id="updateRestaurantRating" parameterType="ReviewDto">
        UPDATE restaurant
        SET RESTAURANT_RATING = CASE
        WHEN RESTAURANT_RATING = 0 THEN RESTAURANT_RATING + #{reviewRating}
        ELSE
        CASE
        WHEN MOD((((RESTAURANT_RATING * (RESTAURANT_REPLY - 1)) + #{reviewRating})) / (RESTAURANT_REPLY), 1) = 0.5
        THEN ROUND((((RESTAURANT_RATING * (RESTAURANT_REPLY - 1)) + #{reviewRating})) / (RESTAURANT_REPLY))
        ELSE FLOOR((((RESTAURANT_RATING * (RESTAURANT_REPLY - 1)) + #{reviewRating})) / (RESTAURANT_REPLY) + 0.5)
        END
        END
        WHERE RESTAURANT_ID = #{restaurantId};
    </update>



    <update id="updataRefund">
        UPDATE orderdetails set ORDERDETAILS_STATUS = "refund"
        WHERE ORDERS_ID = #{ordersId};
    </update>
</mapper>